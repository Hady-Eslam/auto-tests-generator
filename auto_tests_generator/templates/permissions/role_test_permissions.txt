class Test{{ role_title }}Permissions(BaseTest{{ api_name }}Permissions):

    def test_{{ role_filtered_name }}_can_{{ create.can_create }}create(
            self, drf_client,
            mock_{{ role_filtered_name }}_authenticate,
            mock_create_action):

        factory = APIRequestFactory()
        request = factory.post('/testing/')

        view = {{ api_name }}.as_view({'post': 'create'})
        def fake_create(*args, **kwargs):
            Response(status=status.HTTP_201_CREATED)

        view.create = fake_create
        response = view(request, version='v1')

        assert response.status_code == status.{{ create.status }}

    def test_{{ role_filtered_name }}_can_{{ list.can_list }}list(
            self, drf_client,
            mock_{{ role_filtered_name }}_authenticate,
            mock_list_action):

        factory = APIRequestFactory()
        request = factory.get('/testing/')

        view = {{ api_name }}.as_view({'get': 'list'})
        def fake_list(*args, **kwargs):
            Response(status=status.HTTP_200_OK)

        view.list = fake_list
        response = view(request, version='v1')

        assert response.status_code == status.{{ list.status }}

    def test_{{ role_filtered_name }}_can_{{ retrieve.can_retrieve }}retrieve(
            self, drf_client,
            mock_{{ role_filtered_name }}_authenticate,
            mock_retrieve_action):

        factory = APIRequestFactory()
        request = factory.get('/testing/')

        view = {{ api_name }}.as_view({'get': 'retrieve'})
        def fake_retrieve(*args, **kwargs):
            Response(status=status.HTTP_200_OK)

        view.retrieve = fake_retrieve
        response = view(request, version='v1')

        assert response.status_code == status.{{ retrieve.status }}

    def test_{{ role_filtered_name }}_can_{{ update.can_update }}update(
            self, drf_client,
            mock_{{ role_filtered_name }}_authenticate,
            mock_update_action):

        factory = APIRequestFactory()
        request = factory.put('/testing/')

        view = {{ api_name }}.as_view({'put': 'update'})
        def fake_update(*args, **kwargs):
            Response(status=status.HTTP_200_OK)

        view.update = fake_update
        response = view(request, version='v1')

        assert response.status_code == status.{{ update.status }}

    def test_{{ role_filtered_name }}_can_{{ partial_update.can_partial_update }}partial_update(
            self, drf_client,
            mock_{{ role_filtered_name }}_authenticate,
            mock_partial_update_action):

        factory = APIRequestFactory()
        request = factory.patch('/testing/')

        view = {{ api_name }}.as_view({'patch': 'partial_update'})
        def fake_partial_update(*args, **kwargs):
            Response(status=status.HTTP_200_OK)

        view.partial_update = fake_partial_update
        response = view(request, version='v1')

        assert response.status_code == status.{{ partial_update.status }}

    def test_{{ role_filtered_name }}_can_{{ destroy.can_destroy }}destroy(
            self, drf_client,
            mock_{{ role_filtered_name }}_authenticate,
            mock_destroy_action):

        factory = APIRequestFactory()
        request = factory.delete('/testing/')

        view = {{ api_name }}.as_view({'delete': 'destroy'})
        def fake_destroy(*args, **kwargs):
            Response(status=status.HTTP_204_NO_CONTENT)

        view.destroy = fake_destroy
        response = view(request, version='v1')

        assert response.status_code == status.{{ destroy.status }}
